datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  fullName      String
  email         String          @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  messages      Message[]
  conversations ConversationMember[]
  readReceipts  ReadReceipt[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id            String    @id @default(cuid())
  content       String
  senderId      String
  conversationId String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sender        User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  readReceipts  ReadReceipt[]
}

model Conversation {
  id          String                @id @default(cuid())
  isGroup     Boolean               @default(false)
  name        String?
  imageUrl    String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  messages    Message[]
  members     ConversationMember[]
}

model ConversationMember {
  userId         String
  conversationId String
  joinedAt       DateTime  @default(now())

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}


model ReadReceipt {
  id        String   @id @default(cuid())
  userId    String
  messageId String
  readAt    DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
}



//auth

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 