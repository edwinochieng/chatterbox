generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  fullName      String
  email         String           @unique
  emailVerified DateTime?
  password      String
  imageUrl      String?
  bio           String?
  publicKey     String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  conversations ConversationMember[]
  messages      Message[]
  sentFriendRequests   Friendship[]   @relation("SentFriendRequests")
  receivedFriendRequests Friendship[] @relation("ReceivedFriendRequests")
}

model Message {
  id             String        @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  iv             String
  seen           Boolean
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
 
}

model Conversation {
  id        String               @id @default(cuid())
  name      String?
  imageUrl  String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  members   ConversationMember[]
  messages  Message[]
}

model ConversationMember {
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}


model Friendship {
  id        String   @id @default(cuid())
  requesterId String 
  requesteeId String 
  status FriendshipStatus @default(PENDING)
  createdAt  DateTime @default(now())
  requester User @relation("SentFriendRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  requestee User @relation("ReceivedFriendRequests", fields: [requesteeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, requesteeId]) 
}


enum FriendshipStatus {
  PENDING
  ACCEPTED
}
